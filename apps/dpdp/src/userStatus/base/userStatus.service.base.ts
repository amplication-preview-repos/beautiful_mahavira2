/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserStatus as PrismaUserStatus,
  Company as PrismaCompany,
} from "@prisma/client";

export class UserStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userStatus.count(args);
  }

  async userStatuses(
    args: Prisma.UserStatusFindManyArgs
  ): Promise<PrismaUserStatus[]> {
    return this.prisma.userStatus.findMany(args);
  }
  async userStatus(
    args: Prisma.UserStatusFindUniqueArgs
  ): Promise<PrismaUserStatus | null> {
    return this.prisma.userStatus.findUnique(args);
  }
  async createUserStatus(
    args: Prisma.UserStatusCreateArgs
  ): Promise<PrismaUserStatus> {
    return this.prisma.userStatus.create(args);
  }
  async updateUserStatus(
    args: Prisma.UserStatusUpdateArgs
  ): Promise<PrismaUserStatus> {
    return this.prisma.userStatus.update(args);
  }
  async deleteUserStatus(
    args: Prisma.UserStatusDeleteArgs
  ): Promise<PrismaUserStatus> {
    return this.prisma.userStatus.delete(args);
  }

  async findCompany(
    parentId: string,
    args: Prisma.CompanyFindManyArgs
  ): Promise<PrismaCompany[]> {
    return this.prisma.userStatus
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .company(args);
  }
}
