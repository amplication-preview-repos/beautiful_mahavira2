/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CompStatus as PrismaCompStatus,
  User as PrismaUser,
} from "@prisma/client";

export class CompStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CompStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.compStatus.count(args);
  }

  async compStatuses(
    args: Prisma.CompStatusFindManyArgs
  ): Promise<PrismaCompStatus[]> {
    return this.prisma.compStatus.findMany(args);
  }
  async compStatus(
    args: Prisma.CompStatusFindUniqueArgs
  ): Promise<PrismaCompStatus | null> {
    return this.prisma.compStatus.findUnique(args);
  }
  async createCompStatus(
    args: Prisma.CompStatusCreateArgs
  ): Promise<PrismaCompStatus> {
    return this.prisma.compStatus.create(args);
  }
  async updateCompStatus(
    args: Prisma.CompStatusUpdateArgs
  ): Promise<PrismaCompStatus> {
    return this.prisma.compStatus.update(args);
  }
  async deleteCompStatus(
    args: Prisma.CompStatusDeleteArgs
  ): Promise<PrismaCompStatus> {
    return this.prisma.compStatus.delete(args);
  }

  async findUser(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.compStatus
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .user(args);
  }
}
